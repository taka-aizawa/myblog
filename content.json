{"posts":[{"title":"ブログ開始","text":"学んだ知識のメモ書きとして、技術ブログの立ち上げを思い立つ。 QiitaやZennなどのを既存ツールを検討したものの、自由度や視認性の高さなどに惹かれて静的サイトジェネレーターに決めた。テーマはHexoのicarus。 ホスト先はGitHub Pagesにした。管理が楽だというネットの評判で決めたが、Gitを学び始めて数日の超初心者のため諸々見事にハマり、立ち上げに数日かかった。。。 手順 Node.jsのインストール Gitのインストールと初期設定 Hexoのインストール 1. Node.jsのインストールhomebrewでNode.jsをインストール＆確認。 12$ brew install node$ node -v 2. Gitのインストールと初期設定 Gitインストール(brew) Gitユーザ設定＆メール設定 GitHubアカウント作成 GitHubでリポジトリを作成 ググればたくさん情報が出てくるので省略。 3. Hexoをインストールして起動インストール＆確認。 12$ sudo npm install hexo-cli -g$ hexo -v ローカルにHexoの雛形を作成して、必要なパッケージをインストール。 123$ hexo init myblog$ cd myblog$ npm install hexo initコマンドの後ろにファイル名をつければ、ファイルを作成してその中に雛形をデプロイしてくれる。INFO Start blogging with Hexo!と表示されればOK。 準備完了。ローカルで一旦立ち上げてみる。 1$ hexo server [info] Hexo is running at https://localhost:4000/. Press Ctrl+C to stop.と表示されるので、localhost:4000にアクセスしてみる。止める時はCtrl+C。 4. Hexoのテーマ（Icarus）を導入自分は3カラムのデザインにしたいと思い、Hexoのテーマを物色。 色々なデザインテーマが公開されているが、自分がしたいと3カラムのものは意外と少なく、シンプルな感じのIcarusに決定。 Icarushttps://ppoffice.github.io/hexo-theme-icarus/uncategorized/getting-started-with-icarus/ が、このテーマ導入でまずハマる。 ハマりポイント①：インストール方法が２種類あるIcarusのインストール方法はgit cloneとnpm経由の２種類があり、それぞれインストールされるフォルダが違う。 前者はmyblog/themesの下にicarusというフォルダ名でインストールされるが、後者はmyblog/node_modulesの下にhexo-theme-icarus（とhexo-renderer-inferno）がインストールされる。 最初にnpmでインストールした後、インストール先がわからずcloneもしてしまった。 その後にthemesの下のフォルダの方で設定を変更したが、デプロイ後に反映されず、node_modules側を読み込んでいるのだと気づくのに時間がかかった。 自分はnpm経由を選択。「Install via NPM」のタブからコマンドを実行。 1$ npm install -S hexo-theme-icarus hexo-renderer-inferno その後、myblogのフォルダ内にある_config.ymlのthemesの項をicarusに変更。公式ではhexo config theme icarusコマンドが紹介されているが、コマンドを実行したらymlファイルのレイアウトが変わって気持ち悪かったので、手動で対応。 1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: icarus ここまでで一旦ローカルで立ち上げ直してみて、Icarusがテーマとして反映されているか確認。 12$ hexo generate$ hexo server localhost:4000を見てみて、テーマが反映されていればOK。 ハマりポイント②：_config.icarus.ymlファイルが見当たらないhexo generateは、静的NTMLをpublicフォルダに生成してくれるコマンド。 ローカルでの動作確認だけならhexo serverの前に実行する必要はないが、Icarusのデザイン調整を行う_config.icarus.ymlファイルは、hexo generate実行後に生成される。 このことを知らず、当初hexo generateを実行せずにhexo serverだけ実行してローカルで動かしつつデザイン調整をしようとしたため、肝心のymlファイルが見当たらなくて焦った。 5. GitHubにプッシュしてPagesで公開エディタで_config.ymlを以下のように編集。デプロイの項目はrepo:とbranch:を追記。 12345678910# URL## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'url: https://XXXXXX【ユーザ名】.github.io/XXXXXX【リポジトリ名】/# Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy: type: git repo: git@github.com:XXXXXX.git【GitHubのリポジトリのURL】 branch: master これをhexoのコマンドでデプロイするが、Gitへのデプロイヤーが必要なため先に入れておく。 12$ npm install hexo-deployer-git --save$ hexo deploy -g その後、リポジトリの「Settings」→「Pages」→「Build and deployment」の箇所でBranchをmasterにしてsave。 しばらくすると、「Pages」にYour site is live at https://XXXXXという表示が出るので、アクセスしてみて見れればOK。 ハマりポイント③：icarusがsubmoduleとして認識されることがある最初ビルドした際に、エラーが発生して正常に公開できなかった。 エラーメッセージを見たところ、どうやらicarusをsubmoduleとして認識しているが.gitmoduleファイルに記述が見当たらない、というものらしい（そもそもsubmoduleという概念自体を知らなかったため、ここでもまた理解するのに時間がかかった）。。。 原因を特定したはいいものの、現存のicarusフォルダをsubmoduleする方法もその後のsubmoduleの管理方法を調べてみても、超初心者にはよくわからない。。。 よくよく調べてみると、そもそもPagesはデフォルトでJekyllという自動ビルドツールを使っており、このJekyllがicarusをsubmoduleと認識してしまっているっぽい。 .nojekyllという空ファイルをディレクトリ内に置いておくとJekyllの自動ビルドが行われないとのことで、これを試してみたところ無事ビルドされて公開できた。 1$ touch .nojekyll 6. 感想主に参考にさせていただいたサイトは以下のとおり。 https://liginc.co.jp/web/programming/server/104594https://qiita.com/ORCHESTRA_TAPE/items/092d1479ff6dcc7e51c2https://tech.qookie.jp/posts/hexo-deploy-github-pages-backup-version/ Gitに限らず全般的なリテラシー不足なため、諸々初歩的な点で躓いてしまうが、備忘のため恥を忍んで記録に残す。","link":"/myblog/2024/10/28/202410/%E3%83%95%E3%82%99%E3%83%AD%E3%82%AF%E3%82%99%E9%96%8B%E5%A7%8B/"}],"tags":[{"name":"Hexo","slug":"Hexo","link":"/myblog/tags/Hexo/"},{"name":"Icarus","slug":"Icarus","link":"/myblog/tags/Icarus/"}],"categories":[{"name":"ブログ","slug":"ブログ","link":"/myblog/categories/%E3%83%96%E3%83%AD%E3%82%B0/"}],"pages":[]}