{"posts":[{"title":"GitHubでバックアップ","text":"ブログ立ち上げは無事できたが、現状ではGitHubでホストできているのは公開用データのみで、記事データ（.mdファイル）などはバックアップできていない。 ＃Hexoはフォルダ内のデータからhexo generateコマンドでPublicフォルダを生成し、指定した公開場所（_config.ymlの#Deployment）にデプロイする。 職場で日頃から「端末は一番大事な時に壊れたりするのでローカルだけで持ってはいけない、必ずクラウドで管理すること」と言われているので、ブログデータ全体をGitHubでバックアップしながらGitHub Pagesにデプロイする方法を検討。 手順 main(master)ブランチでバックアップを取りつつ、gh-pagesブランチにデプロイする。 Hexoを入れているローカルフォルダをGit管理にする コミットする ローカルフォルダとGitHubのリモートリポジトリを紐づける プッシュする _config.ymlを書き換えてデプロイする まずはローカルフォルダをGit管理にする。 12$ cd myblog$ git init コミットする。 12$ git add .$ git commit -m &quot;XXXXX&quot; GitHubからリモートリポジトリのURLをコピーしてきたら、ローカルと紐づける。 1$ git remote add origin https://github.com/XXXXX プッシュする。 1git push origin main ローカルのメインリポジトリ名をmain、リモートがmasterになっていたせいでブランチが二つできてしまった。。。 GitHubでデフォルトのブランチをmasterからmainに変更して、masterブランチを削除。 その後、_config.ymlのbranch:をmasterからgh-pagesに編集。 1234deploy: type: git repo: git@github.com:XXXXXX.git【GitHubのリポジトリのURL】 branch: gh-pages #ここをmasterから変更 これまでの作業を保存（add, commit , push）してhexo deployすると、リモートにgh-pagesブランチが作成される。 あとはGitHubのPagesの設定（Build and deployment）の「Branch」をgh-pagesブランチに変更すればOK. --- 今後は編集するたびに以下のコマンドを繰り返せばよさそう。 12345$ hexo generate$ git add$ git commit -m &quot;XXXXX&quot;$ git push origin main$ hexo deploy 参考にさせていただいたサイトhttps://qiita.com/nyu___nS/items/3fca57ce133be69835ba#comments","link":"/myblog/2024/11/github-backup/"},{"title":"ブログ開始","text":"学んだ知識のメモ書きとして、技術ブログの立ち上げを思い立つ。 QiitaやZennなどのを既存ツールを検討したものの、自由度や視認性の高さなどに惹かれて静的サイトジェネレーターに決めた。テーマはHexoのicarus。 ホスト先はGitHub Pagesにした。管理が楽だというネットの評判で決めたが、Gitを学び始めて数日の超初心者のため諸々見事にハマり、立ち上げに数日かかった。。。 手順 やることは大体こんな感じ。 1. Node.jsのインストール 2. Gitのインストールと初期設定 3. Hexoをインストールして起動 4. Hexoのテーマ（Icarus）を導入 ハマりポイント①：インストール方法が２種類ある ハマりポイント②：_config.icarus.ymlファイルが見当たらない 5. GitHubにプッシュしてPagesで公開 ハマりポイント③：icarusがsubmoduleとして認識されることがある 6. 感想 1. Node.jsのインストール homebrewでNode.jsをインストール＆確認。 12$ brew install node$ node -v 2. Gitのインストールと初期設定 Gitインストール(brew) Gitユーザ設定＆メール設定 GitHubアカウント作成 GitHubでリポジトリを作成 ググればたくさん情報が出てくるので省略。 3. Hexoをインストールして起動 インストール＆確認。 12$ sudo npm install hexo-cli -g$ hexo -v ローカルにHexoの雛形を作成して、必要なパッケージをインストール。 123$ hexo init myblog$ cd myblog$ npm install hexo initコマンドの後ろにファイル名をつければ、ファイルを作成してその中に雛形をデプロイしてくれる。INFO Start blogging with Hexo!と表示されればOK。 準備完了。ローカルで一旦立ち上げてみる。 1$ hexo server [info] Hexo is running at https://localhost:4000/. Press Ctrl+C to stop.と表示されるので、localhost:4000にアクセスしてみる。止める時はCtrl+C。 4. Hexoのテーマ（Icarus）を導入 自分は3カラムのデザインにしたいと思い、Hexoのテーマを物色。 色々なデザインテーマが公開されているが、自分がしたいと3カラムのものは意外と少なく、シンプルな感じのIcarusに決定。 Icarushttps://ppoffice.github.io/hexo-theme-icarus/uncategorized/getting-started-with-icarus/ が、このテーマ導入でまずハマる。 ハマりポイント①：インストール方法が２種類あるIcarusのインストール方法はgit cloneとnpm経由の２種類があり、それぞれインストールされるフォルダが違う。 前者はmyblog/themesの下にicarusというフォルダ名でインストールされるが、後者はmyblog/node_modulesの下にhexo-theme-icarus（とhexo-renderer-inferno）がインストールされる。 最初にnpmでインストールした後、インストール先がわからずcloneもしてしまった。 その後にthemesの下のフォルダの方で設定を変更したが、デプロイ後に反映されず、node_modules側を読み込んでいるのだと気づくのに時間がかかった。 自分はnpm経由を選択。「Install via NPM」のタブからコマンドを実行。 1$ npm install -S hexo-theme-icarus hexo-renderer-inferno その後、myblogのフォルダ内にある_config.ymlのthemesの項をicarusに変更。 公式ではhexo config theme icarusコマンドが紹介されているが、コマンドを実行したらymlファイルのレイアウトが変わって気持ち悪かったので、手動で対応。 1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: icarus ここまでで一旦ローカルで立ち上げ直してみて、Icarusがテーマとして反映されているか確認。 12$ hexo generate$ hexo server localhost:4000を見てみて、テーマが反映されていればOK。 ハマりポイント②：_config.icarus.ymlファイルが見当たらないhexo generateは、静的NTMLをpublicフォルダに生成してくれるコマンド。 ローカルでの動作確認だけならhexo serverの前に実行する必要はないが、Icarusのデザイン調整を行う_config.icarus.ymlファイルは、hexo generate実行後に生成される。 このことを知らず、当初hexo generateを実行せずにhexo serverだけ実行してローカルで動かしつつデザイン調整をしようとしたため、肝心のymlファイルが見当たらなくて焦った。 5. GitHubにプッシュしてPagesで公開 エディタで_config.ymlを以下のように編集。デプロイの項目はrepo:とbranch:を追記。 12345678# URLurl: https://XXXXXX【ユーザ名】.github.io/XXXXXX【リポジトリ名】/# Deploymentdeploy: type: git repo: git@github.com:XXXXXX.git【GitHubのリポジトリのURL】 branch: master 上のURL情報はデプロイに必要か分からないが、一応入れておく。 これをhexoのコマンドでデプロイするが、Gitへのデプロイヤーが必要なため先に入れておく。 12$ npm install hexo-deployer-git --save$ hexo deploy -g その後、リポジトリの「Settings」→「Pages」→「Build and deployment」の箇所でBranchを「master」に選択してsave。 しばらくすると、「Pages」にYour site is live at https://XXXXXという表示が出るので、アクセスしてみて見れればOK。 ハマりポイント③：icarusがsubmoduleとして認識されることがある最初ビルドした際に、エラーが発生して正常に公開できなかった。 エラーメッセージを見たところ、どうやらicarusをsubmoduleとして認識しているが.gitmoduleファイルに記述が見当たらない、というものらしい（そもそもsubmoduleという概念自体を知らなかったため、ここでもまた理解するのに時間がかかった）。。。 原因を特定したはいいものの、現存のicarusフォルダをsubmoduleする方法もその後のsubmoduleの管理方法を調べてみても、超初心者にはよくわからない。。。 よくよく調べてみると、そもそもPagesはデフォルトでJekyllという自動ビルドツールを使っており、このJekyllがicarusをsubmoduleと認識してしまっているっぽい。 .nojekyllという空ファイルをディレクトリ内に置いておくとJekyllの自動ビルドが行われないとのことで、これを試してみたところ無事ビルドされて公開できた。 1$ touch .nojekyll 6. 感想 主に参考にさせていただいたサイトは以下のとおり。 https://liginc.co.jp/web/programming/server/104594https://qiita.com/ORCHESTRA_TAPE/items/092d1479ff6dcc7e51c2https://tech.qookie.jp/posts/hexo-deploy-github-pages-backup-version/ Gitに限らず全般的なリテラシー不足なため、諸々初歩的な点で躓いてしまうが、備忘のため恥を忍んで記録に残す。 ＃デザインファイル（hexo-theme-icarus/style/*.styl）の変更がhexo deploy -gコマンドでもうまく反映できないのが追加課題。。。","link":"/myblog/2024/10/start-blog/"},{"title":"GitHubのユーザ名を変更","text":"雑につけたGitHubの名前を変えたくなり、まだ取り返しがつくうちに変更。 挙動がおかしくなるんじゃないかと不安になりつつ、↓の方の記事をみて多分大丈夫だと思い決行。 適当に付けたGitHubのユーザー名を変えたくなった話 手順 GitHubにログインして設定画面から変更 ローカルの.gitconfigファイルを編集 Git管理のファイルの設定変更 GitHubにログインして設定画面から変更GitHubにログインして「Setting」→「Account」をクリックする。 表示された画面の「Change username」をクリックして、出てくるWarningっぽいポップアップの中のI understand, let's change my usernameを更にクリック。 新しいユーザ名を入れるウィンドウが出てくるので、ユーザ名を入力して「Change username」をクリックして完了。 ローカルの.gitconfigファイルを編集エディタで直接編集。 123456$ cd ~$ subl .gitconfig[user] name = XXXX email = XXXX Git管理のファイルの設定変更現状はこのブログのファイルのみがGit管理下。まずリモートリポジトリを確認＆修正。 123$ cd myblog$ git remote -v$ git remote set-url origin 【新しいURL】 _config.ymlも修正。 123456url: https://【新しいユーザ名】.github.io/myblog/deploy: type: git repo: 【新しいURL】 branch: gh-pages","link":"/myblog/2024/11/github-username-modify/"},{"title":"Hexoに目次のプラグインを導入","text":"記事レイアウトの微調整。tocというプラグインで目次の自動生成ができるとのこと。 手順 プラグイン（hexo-toc）のインストール Icarusのconfigファイルを編集 記事内にタグを設置 プラグイン（hexo-toc）のインストール1$ npm install hexo-toc --save Icarusのconfigファイルを編集_config.icarus.ymlに以下を追記。 12345678toc: maxdepth: 3 class: toc slugify: uslug anchor: position: after symbol: &quot;#&quot; style: header-anchor 記事内にタグを設置記事内の目次を表示したい場所に以下のタグを設置。見出しから自動的に目次を出力してくれる。 1&lt;!-- toc --&gt; 参考にさせていただいた記事は以下。HEXO の投稿に目次機能を追加する","link":"/myblog/2024/11/hexo-plugin-toc/"},{"title":"netplanとsshのメモ","text":"職場のクラウド環境から外部のプライベート環境に行くための設定でミスったので、備忘のためのメモ。 やってしまったことubuntuのnetplanにネットワーク設定を追加するyamlファイル（60-xxx.yaml）を置いたところ、sshができなくなってしまった。 クラウドを管理してくださってる方にお願いして、yamlファイルを削除してもらったところ、無事復旧。 sshの超初歩ミスその後、別のパブリッククラウドもubuntu2台を構築してもらっているが、アドレスを指定してもアクセスできない。 と騒いでいたら、ユーザ名を入れていないだけだと分かり赤面。 1$ ssh aizawa@123.456.789.0 踏み台サーバから２台に入るための設定は/etc/hostsに追記してくださっているので、サーバ名だけ入れれば2台とも入れる。 123$ cat /etc/hosts$ ssh cadde-xxx #踏み台サーバに入っている状態で .ssh/configを書けば一発で入れるとのこと。たぶんこういうのだと思うので、後で試してみる。SSH接続先の情報をssh configに記載する","link":"/myblog/2024/11/memo-netplan-and-ssh/"},{"title":"linuxのパスワード確認＆変更","text":"地味だけど大事なのでメモ。 パスワード確認。 1$ cat .passwd パスワード変更。 1$ passwd","link":"/myblog/2024/11/linux-passwd/"}],"tags":[{"name":"Hexo","slug":"Hexo","link":"/myblog/tags/Hexo/"},{"name":"Icarus","slug":"Icarus","link":"/myblog/tags/Icarus/"},{"name":"Git","slug":"Git","link":"/myblog/tags/Git/"},{"name":"ssh","slug":"ssh","link":"/myblog/tags/ssh/"},{"name":"network","slug":"network","link":"/myblog/tags/network/"},{"name":"linux","slug":"linux","link":"/myblog/tags/linux/"}],"categories":[{"name":"blog","slug":"blog","link":"/myblog/categories/blog/"},{"name":"tech","slug":"tech","link":"/myblog/categories/tech/"}],"pages":[]}