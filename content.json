{"posts":[{"title":"GitHubでバックアップ","text":"ブログ立ち上げは無事できたが、現状ではGitHubでホストできているのは公開用データのみで、記事データ（.mdファイル）などはバックアップできていない。 ＃Hexoはフォルダ内のデータからhexo generateコマンドでPublicフォルダを生成し、指定した公開場所（_config.ymlの#Deployment）にデプロイする。 職場で日頃から「端末は一番大事な時に壊れたりするのでローカルだけで持ってはいけない、必ずクラウドで管理すること」と言われているので、ブログデータ全体をGitHubでバックアップしながらGitHub Pagesにデプロイする方法を検討。 手順 main(master)ブランチでバックアップを取りつつ、gh-pagesブランチにデプロイする。 Hexoを入れているローカルフォルダをGit管理にする コミットする ローカルフォルダとGitHubのリモートリポジトリを紐づける プッシュする _config.ymlを書き換えてデプロイする まずはローカルフォルダをGit管理にする。 12$ cd myblog$ git init コミットする。 12$ git add .$ git commit -m &quot;XXXXX&quot; GitHubからリモートリポジトリのURLをコピーしてきたら、ローカルと紐づける。 1$ git remote add origin https://github.com/XXXXX プッシュする。 1git push origin main ローカルのメインリポジトリ名をmain、リモートがmasterになっていたせいでブランチが二つできてしまった。。。 GitHubでデフォルトのブランチをmasterからmainに変更して、masterブランチを削除。 その後、_config.ymlのbranch:をmasterからgh-pagesに編集。 1234deploy: type: git repo: git@github.com:XXXXXX.git【GitHubのリポジトリのURL】 branch: gh-pages #ここをmasterから変更 これまでの作業を保存（add, commit , push）してhexo deployすると、リモートにgh-pagesブランチが作成される。 あとはGitHubのPagesの設定（Build and deployment）の「Branch」をgh-pagesブランチに変更すればOK. --- 今後は編集するたびに以下のコマンドを繰り返せばよさそう。 12345$ hexo generate$ git add$ git commit -m &quot;XXXXX&quot;$ git push origin main$ hexo deploy 参考にさせていただいたサイトhttps://qiita.com/nyu___nS/items/3fca57ce133be69835ba#comments","link":"/myblog/2024/11/github-backup/"},{"title":"ブログ開始","text":"学んだ知識のメモ書きとして、技術ブログの立ち上げを思い立つ。 QiitaやZennなどのを既存ツールを検討したものの、自由度や視認性の高さなどに惹かれて静的サイトジェネレーターに決めた。テーマはHexoのicarus。 ホスト先はGitHub Pagesにした。管理が楽だというネットの評判で決めたが、Gitを学び始めて数日の超初心者のため諸々見事にハマり、立ち上げに数日かかった。。。 手順 やることは大体こんな感じ。 1. Node.jsのインストール 2. Gitのインストールと初期設定 3. Hexoをインストールして起動 4. Hexoのテーマ（Icarus）を導入 ハマりポイント①：インストール方法が２種類ある ハマりポイント②：_config.icarus.ymlファイルが見当たらない 5. GitHubにプッシュしてPagesで公開 ハマりポイント③：icarusがsubmoduleとして認識されることがある 6. 感想 1. Node.jsのインストール homebrewでNode.jsをインストール＆確認。 12$ brew install node$ node -v 2. Gitのインストールと初期設定 Gitインストール(brew) Gitユーザ設定＆メール設定 GitHubアカウント作成 GitHubでリポジトリを作成 ググればたくさん情報が出てくるので省略。 3. Hexoをインストールして起動 インストール＆確認。 12$ sudo npm install hexo-cli -g$ hexo -v ローカルにHexoの雛形を作成して、必要なパッケージをインストール。 123$ hexo init myblog$ cd myblog$ npm install hexo initコマンドの後ろにファイル名をつければ、ファイルを作成してその中に雛形をデプロイしてくれる。INFO Start blogging with Hexo!と表示されればOK。 準備完了。ローカルで一旦立ち上げてみる。 1$ hexo server [info] Hexo is running at https://localhost:4000/. Press Ctrl+C to stop.と表示されるので、localhost:4000にアクセスしてみる。止める時はCtrl+C。 4. Hexoのテーマ（Icarus）を導入 自分は3カラムのデザインにしたいと思い、Hexoのテーマを物色。 色々なデザインテーマが公開されているが、自分がしたいと3カラムのものは意外と少なく、シンプルな感じのIcarusに決定。 Icarushttps://ppoffice.github.io/hexo-theme-icarus/uncategorized/getting-started-with-icarus/ が、このテーマ導入でまずハマる。 ハマりポイント①：インストール方法が２種類あるIcarusのインストール方法はgit cloneとnpm経由の２種類があり、それぞれインストールされるフォルダが違う。 前者はmyblog/themesの下にicarusというフォルダ名でインストールされるが、後者はmyblog/node_modulesの下にhexo-theme-icarus（とhexo-renderer-inferno）がインストールされる。 最初にnpmでインストールした後、インストール先がわからずcloneもしてしまった。 その後にthemesの下のフォルダの方で設定を変更したが、デプロイ後に反映されず、node_modules側を読み込んでいるのだと気づくのに時間がかかった。 自分はnpm経由を選択。「Install via NPM」のタブからコマンドを実行。 1$ npm install -S hexo-theme-icarus hexo-renderer-inferno その後、myblogのフォルダ内にある_config.ymlのthemesの項をicarusに変更。 公式ではhexo config theme icarusコマンドが紹介されているが、コマンドを実行したらymlファイルのレイアウトが変わって気持ち悪かったので、手動で対応。 1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: icarus ここまでで一旦ローカルで立ち上げ直してみて、Icarusがテーマとして反映されているか確認。 12$ hexo generate$ hexo server localhost:4000を見てみて、テーマが反映されていればOK。 ハマりポイント②：_config.icarus.ymlファイルが見当たらないhexo generateは、静的NTMLをpublicフォルダに生成してくれるコマンド。 ローカルでの動作確認だけならhexo serverの前に実行する必要はないが、Icarusのデザイン調整を行う_config.icarus.ymlファイルは、hexo generate実行後に生成される。 このことを知らず、当初hexo generateを実行せずにhexo serverだけ実行してローカルで動かしつつデザイン調整をしようとしたため、肝心のymlファイルが見当たらなくて焦った。 5. GitHubにプッシュしてPagesで公開 エディタで_config.ymlを以下のように編集。デプロイの項目はrepo:とbranch:を追記。 12345678# URLurl: https://XXXXXX【ユーザ名】.github.io/XXXXXX【リポジトリ名】/# Deploymentdeploy: type: git repo: git@github.com:XXXXXX.git【GitHubのリポジトリのURL】 branch: master 上のURL情報はデプロイに必要か分からないが、一応入れておく。 これをhexoのコマンドでデプロイするが、Gitへのデプロイヤーが必要なため先に入れておく。 12$ npm install hexo-deployer-git --save$ hexo deploy -g その後、リポジトリの「Settings」→「Pages」→「Build and deployment」の箇所でBranchを「master」に選択してsave。 しばらくすると、「Pages」にYour site is live at https://XXXXXという表示が出るので、アクセスしてみて見れればOK。 ハマりポイント③：icarusがsubmoduleとして認識されることがある最初ビルドした際に、エラーが発生して正常に公開できなかった。 エラーメッセージを見たところ、どうやらicarusをsubmoduleとして認識しているが.gitmoduleファイルに記述が見当たらない、というものらしい（そもそもsubmoduleという概念自体を知らなかったため、ここでもまた理解するのに時間がかかった）。。。 原因を特定したはいいものの、現存のicarusフォルダをsubmoduleする方法もその後のsubmoduleの管理方法を調べてみても、超初心者にはよくわからない。。。 よくよく調べてみると、そもそもPagesはデフォルトでJekyllという自動ビルドツールを使っており、このJekyllがicarusをsubmoduleと認識してしまっているっぽい。 .nojekyllという空ファイルをディレクトリ内に置いておくとJekyllの自動ビルドが行われないとのことで、これを試してみたところ無事ビルドされて公開できた。 1$ touch .nojekyll 6. 感想 主に参考にさせていただいたサイトは以下のとおり。 https://liginc.co.jp/web/programming/server/104594https://qiita.com/ORCHESTRA_TAPE/items/092d1479ff6dcc7e51c2https://tech.qookie.jp/posts/hexo-deploy-github-pages-backup-version/ Gitに限らず全般的なリテラシー不足なため、諸々初歩的な点で躓いてしまうが、備忘のため恥を忍んで記録に残す。 ＃デザインファイル（hexo-theme-icarus/style/*.styl）の変更がhexo deploy -gコマンドでもうまく反映できないのが追加課題。。。","link":"/myblog/2024/10/start-blog/"},{"title":"GitHubのユーザ名を変更","text":"雑につけたGitHubの名前を変えたくなり、まだ取り返しがつくうちに変更。 挙動がおかしくなるんじゃないかと不安になりつつ、↓の方の記事をみて多分大丈夫だと思い決行。 適当に付けたGitHubのユーザー名を変えたくなった話 手順 GitHubにログインして設定画面から変更 ローカルの.gitconfigファイルを編集 Git管理のファイルの設定変更 GitHubにログインして設定画面から変更GitHubにログインして「Setting」→「Account」をクリックする。 表示された画面の「Change username」をクリックして、出てくるWarningっぽいポップアップの中のI understand, let's change my usernameを更にクリック。 新しいユーザ名を入れるウィンドウが出てくるので、ユーザ名を入力して「Change username」をクリックして完了。 ローカルの.gitconfigファイルを編集エディタで直接編集。 123456$ cd ~$ subl .gitconfig[user] name = XXXX email = XXXX Git管理のファイルの設定変更現状はこのブログのファイルのみがGit管理下。まずリモートリポジトリを確認＆修正。 123$ cd myblog$ git remote -v$ git remote set-url origin 【新しいURL】 _config.ymlも修正。 123456url: https://【新しいユーザ名】.github.io/myblog/deploy: type: git repo: 【新しいURL】 branch: gh-pages","link":"/myblog/2024/11/github-username-modify/"},{"title":"Hexoに目次のプラグインを導入","text":"記事レイアウトの微調整。tocというプラグインで目次の自動生成ができるとのこと。 手順 プラグイン（hexo-toc）のインストール Icarusのconfigファイルを編集 記事内にタグを設置 プラグイン（hexo-toc）のインストール1$ npm install hexo-toc --save Icarusのconfigファイルを編集_config.icarus.ymlに以下を追記。 12345678toc: maxdepth: 3 class: toc slugify: uslug anchor: position: after symbol: &quot;#&quot; style: header-anchor 記事内にタグを設置記事内の目次を表示したい場所に以下のタグを設置。見出しから自動的に目次を出力してくれる。 1&lt;!-- toc --&gt; 参考にさせていただいた記事は以下。HEXO の投稿に目次機能を追加する","link":"/myblog/2024/11/hexo-plugin-toc/"},{"title":"欧州のデータスペース関連政策の整理①","text":"先日、経団連が「産業データスペースの構築に向けて」を発表した。日本でも徐々に注目を集めつつあるデータスペースについて、欧州の動向を整理しておく。 概観 整理の視点 出発点としてのDSM戦略 課題認識 目標設定 具体的なアクション 考察 概観 欧州委員会は、2015年にデジタル単一市場（Digital Single Market：DSM）戦略を公表した。 DSM戦略では、3つの柱（目的）に基づき16のアクションを定めている。そのうちの三番目の柱が、後に続くデータ分野の取組の政策的根拠となっている。 3. デジタル経済の成長ポテンシャルを最大化する（Maximising the growth potential of the digital economy） ” 欧州委員会は以下を行う： ・EU域内でのデータの自由な流通を促進する「データの自由な流通のイニシアチブ」と「欧州クラウド」イニシアチブを提案する。・デジタル単一市場にとって重要なデバイス、アプリケーション、データ、リポジトリ、サービス、ネットワークの標準化と相互運用性の優先事項を定義する。・市民がインターネットの機会を捉え、就職のチャンスを高めるのに必要なスキルを習得できる包括的なデジタル社会を支援する。 ” このDSM戦略を皮切りに、欧州委員会は立て続けにデータ関連の法政策を打ち出していく。 2016年：欧州クラウドイニシアティブ 2016年：GDPR制定 2017年1月：欧州データ経済の構築 2017年5月：デジタル単一市場戦略中間レビュー 2017年9月：欧州連合における非個人データの自由流通枠組みに関する規則 2018年：共通欧州データスペースに向けて 2019年：デジタル単一市場における著作権指令 2020年２月：欧州のデジタル未来の形成 2020年２月：欧州データ戦略 2020年11月議会提出：データガバナンス法（DGA） 2020年12月議会提出：デジタルサービス法（DSA） 2020年12月議会提出：デジタル市場法（DMA） 2021年：デジタル・コンパス2030 2022年議会提出：データ法 （注）2020年以降の各法はあくまで「法案提出」であって、上記の時点では公布・施行されてはいない。その意味で正確には「〜法（案）」と書くべきだが、ここでは便宜上、施行後の法律名で統一して書く。 上記の欧州委員会の取り組みに加え、これらを参照する形で国ごと、分野ごと（ex. EHDS、EOSCなど）、イニシアティブごと（IDSA、gaia-xなど）の取り組みか発表されており、欧州域内のデジタル政策の全容を把握するのは容易ではない。 ここでは欧州委員会の、しかもデータ分野に絞り、各政策のポイントを整理していく。 なお、DSM戦略や後の法政策はデータ分野に絞ったものではなく、例えば加盟国間の国境を越えたオンライン取引のルール化などの契約・消費者保護分野の取り組みなども含まれている。 欧州のデジタル政策の全体像および詳細は、JETROの「EUデジタル政策の最新概要」を参照。 整理の視点 出発点としてのDSM戦略DSM戦略とそれに続く一連の欧州のデータ関連の取り組みを一言でまとめると、「個人データの保護と非個人データの活用のための制度設計」と整理できる。 個人データ保護の重要性についてはDSM戦略第３章で取り上げられており、欧州の基本権憲章第7条と第8条に基づく最高水準の法的保護を約束すること、GDPRがその実現手段であることなどが述べられている。 その前提の上で、DSM戦略は第４章において、欧州委員会は「今後ほとんどの経済活動が、デジタルインフラやハード、ソフト、アプリ、データを統合したデジタルエコシステムに依存するようになり、そのためのあらゆる分野のデジタル化が必要となる」と予見する。 また、こうしたデジタル経済は、欧州の産業競争力を維持し、交通やエネルギーなどのインテリジェンス化・スマート化などの機会を提供し、社会を包括的にし、欧州全域でシームレスなデジタルサービスを受けられるなどの恩恵をもたらす、としている。 課題認識その一方で、欧州委員会は企業のデジタル化が欧州の弱点であることを指摘している。 ビジネスでのデジタル技術の統合は、最も弱い要素である。（中略）EUの企業のわずか1.7%しかデジタル技術を充分に活用できておらず、41%は全く利用していない。 このような「断片化した市場（fragmented market）」では、クラウドコンピューティング、ビッグデータ、データ駆動型科学、IoTなどのデジタル・データ技術の分野で欧州がそのポテンシャルをフルに発揮することは難しい、という見解を示している。 目標設定では、欧州委員会はこの問題に対し、どのように取り組むのか。本文を引用する。 デジタル技術とデータ技術の可能性を充分に享受するためには、一連の技術的・法律的障壁を取り除く必要がある。 データの所在に関する制限（加盟国が自国内にデータを保管するよう要求するもの）などにより、サービスプロバイダーは高価なローカルインフラ（データセンター）を各国・地域に構築せざるを得ない。 著作権ルールの断片的な実施や、データ使用権（right to use data）に関する明確性の欠如は、国境を越えたデータの使用やテクノロジーの新しい応用（テキストマイニングやデータマイニングなど）の発展を更に妨げる。 オープンで相互運用可能なシステムやサービス、そしてサービス間のデータポータビリティの欠如は、国境を越えたデータの流れや新しいサービス（例えばマルチモーダル旅行情報システム、データ駆動型科学）の発展にとってもう一つの障壁となる。 （個人データ関連以外の）責任分担に関する法的確実性は、モノのインターネットの展開にとって重要である。 「データの所在に関する制限」とは、データローカライゼーション規制を指している。データローカライゼーション規制については、 平成30年版 情報通信白書が詳しい。 また、「サービス間のデータポータビリティ」とは、データポータビリティ権を指している。データポータビリティ権については、令和元年版 情報通信白書が詳しい。 つまり、企業のデジタル化を推進するためには、欧州域内において次を実現する施策が必要だと述べている。 データローカライゼーション規制の撤廃 著作権ルールの統一的整備 データ使用権の明確化 オープンで相互運用可能なシステム データポータビリティ権の確保 「データローカライゼーション規制の撤廃」と「データポータビリティ権の確保」は、いずれもデータの自由な移動を確保するという点で重複する施策のように見える。 この点、欧州委員会は、個人データについては2016年に成立予定のGDPRでポータビリティ権が確保できるが、非個人データに関しては各国のデータローカライゼーション規制によりデータの事実上のポータビリティ権が妨げられている、と述べている。 データ保護改革パッケージの採択（訳者注：GDPRのこと）により、個人データの処理は欧州連合全域で統一された最新の規則によって管理されることになる。しかし契約では、データを利用しなくなったり、できなくなった場合のクラウドプロバイダーの契約上の責任が免除されるか大幅に限定している場合が多く、また契約解除が困難な場合もある。つまり、データは事実上、ポータブルでない。 （中略）加盟国はプライバシーや個人データ保護を理由に個人データの自由な移動を制限することはできないが、その他の理由で制限することはできてしまっている。欧州連合域内におけるデータの所在に関する不必要な制限は、いずれも撤廃され防止されるべきである。 具体的なアクション上記の施策を具体化する取り組みとして、以下の2点が挙げられている。 4.1. データ経済の構築（Building a data economy） 欧州委員会は2016年に、欧州域内における個人データの保護以外の理由によるデータの自由な移動の制限や、データのストレージや処理のためのロケーションに関する不当な制限に対処するため、「データの自由な流れ（Free flow of data）」のイニシアティブを提案する。 同委員会は、企業間取引（B2B）、企業と消費者の取引（B2C）、機械生成データや機械間（M2M）のデータなどの状況におけるデータのオーナーシップ、相互運用性、利用可能性、アクセスに関する新たな問題に対処する。 同委員会は、クラウドサービスの認証、契約、プロバイダーの切り替え、研究オープンサイエンスクラウドなどを含む欧州クラウド構想を立ち上げる。 4.2. 競争力の強化相互運用性と標準化による競争力強化（Boosting competitiveness through interoperability and standardisation） 欧州委員会は、医療（遠隔医療、モバイルヘルス（mHealth））、運輸（旅行計画、電子貨物（e-freight））、環境、エネルギーなどの分野における不可欠な分野別の相互運用性や標準を含め、デジタル単一市場にとって重要であると考えられる技術や分野に焦点を当て、標準化のための主要な優先事項を特定・定義するための統合標準化計画（an integrated standardisation plan）を立ち上げる。 同委員会は、欧州相互運用性フレームワーク（European Interoperability Framework）の改訂と拡張を行う。 （注）「データのオーナーシップ」についてDSM戦略第４章4.1に述べられている「ownership of data」は、直訳すると「データの所有権」となるが、データは無体物であって日本の民法上の所有権の対象では無い。また、海外においても「データの所有権」は論争の対象であることから、ここでは経産省のガイドラインの整理にある「データ・オーナーシップ」が一番近い概念として、これを訳語にあてる。 考察 余談:一連の欧州のデータ政策が、政治システムの全く異なる日本でどのように受容されて包括的データ戦略やウラノスエコシステムに至ったか、公共政策学の「政策移転」の観点から分析してみるのも面白そう。","link":"/myblog/2024/11/dataspaces-history/"},{"title":"netplanとsshのメモ","text":"職場のクラウド環境から外部のプライベート環境に行くための設定でミスったので、備忘のためのメモ。 やってしまったことubuntuのnetplanにネットワーク設定を追加するyamlファイル（60-xxx.yaml）を置いたところ、sshができなくなってしまった。 クラウドを管理してくださってる方にお願いして、yamlファイルを削除してもらったところ、無事復旧。 sshの超初歩ミスその後、別のパブリッククラウドもubuntu2台を構築してもらっているが、アドレスを指定してもアクセスできない。 と騒いでいたら、ユーザ名を入れていないだけだと分かり赤面。 1$ ssh aizawa@123.456.789.0 踏み台サーバから２台に入るための設定は/etc/hostsに追記してくださっているので、サーバ名だけ入れれば2台とも入れる。 123$ cat /etc/hosts$ ssh cadde-xxx #踏み台サーバに入っている状態で .ssh/configを書けば一発で入れるとのこと。たぶんこういうのだと思うので、後で試してみる。SSH接続先の情報をssh configに記載する","link":"/myblog/2024/11/memo-netplan-and-ssh/"}],"tags":[{"name":"Hexo","slug":"Hexo","link":"/myblog/tags/Hexo/"},{"name":"Icarus","slug":"Icarus","link":"/myblog/tags/Icarus/"},{"name":"Git","slug":"Git","link":"/myblog/tags/Git/"},{"name":"data space","slug":"data-space","link":"/myblog/tags/data-space/"},{"name":"政策動向","slug":"政策動向","link":"/myblog/tags/%E6%94%BF%E7%AD%96%E5%8B%95%E5%90%91/"},{"name":"ssh","slug":"ssh","link":"/myblog/tags/ssh/"},{"name":"network","slug":"network","link":"/myblog/tags/network/"}],"categories":[{"name":"blog","slug":"blog","link":"/myblog/categories/blog/"},{"name":"tech","slug":"tech","link":"/myblog/categories/tech/"},{"name":"policy","slug":"policy","link":"/myblog/categories/policy/"}],"pages":[]}