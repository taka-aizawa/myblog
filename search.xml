<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexoに目次のプラグインを導入</title>
      <link href="/myblog/2024/11/hexo-plugin-toc/"/>
      <url>/myblog/2024/11/hexo-plugin-toc/</url>
      
        <content type="html"><![CDATA[<p>記事レイアウトの微調整。tocというプラグインで目次の自動生成ができるとのこと。</p><br><hr><h1><span id="手順"><strong>手順</strong></span></h1><hr><!-- toc --><ul><li><a href="#%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3hexo-toc%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">プラグイン（hexo-toc）のインストール</a></li><li><a href="#config%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E7%B7%A8%E9%9B%86">configファイルを編集</a></li><li><a href="#%E8%A8%98%E4%BA%8B%E5%86%85%E3%81%AB%E3%82%BF%E3%82%B0%E3%82%92%E8%A8%AD%E7%BD%AE">記事内にタグを設置</a></li></ul><!-- tocstop --><h3><span id="プラグインhexo-tocのインストール">プラグイン（hexo-toc）のインストール</span></h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-toc --save</span><br></pre></td></tr></table></figure><br><h3><span id="configファイルを編集">configファイルを編集</span></h3><p>_config.icarus.ymlに以下を追記。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">maxdepth:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">class:</span> <span class="string">toc</span></span><br><span class="line">  <span class="attr">slugify:</span> <span class="string">uslug</span></span><br><span class="line">  <span class="attr">anchor:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">after</span></span><br><span class="line">    <span class="attr">symbol:</span> <span class="string">&quot;#&quot;</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">header-anchor</span></span><br></pre></td></tr></table></figure><br><h3><span id="記事内にタグを設置">記事内にタグを設置</span></h3><p>記事内の目次を表示したい場所に以下のタグを設置。見出しから自動的に目次を出力してくれる。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- toc --&gt;</span><br></pre></td></tr></table></figure><br><p>参考にさせていただいた記事は以下。<br><a href="https://fennote.fareastnoise.com/2022/03/04/toc/">HEXO の投稿に目次機能を追加する</a></p><br><br>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Icarus </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHubのユーザ名を変更</title>
      <link href="/myblog/2024/11/github-username-modify/"/>
      <url>/myblog/2024/11/github-username-modify/</url>
      
        <content type="html"><![CDATA[<p>雑につけたGitHubの名前を変えたくなり、まだ取り返しがつくうちに変更。</p><p>挙動がおかしくなるんじゃないかと不安になりつつ、↓の記事をみて多分大丈夫だと思い決行。</p><p><a href="https://qiita.com/plant0322/items/c278ef6d42d096714aa9">適当に付けたGitHubのユーザー名を変えたくなった話</a></p><br><hr><h1><span id="手順"><strong>手順</strong></span></h1><hr><!-- toc --><ul><li><a href="#github%E3%81%AB%E3%83%AD%E3%82%B0%E3%82%A4%E3%83%B3%E3%81%97%E3%81%A6%E8%A8%AD%E5%AE%9A%E7%94%BB%E9%9D%A2%E3%81%8B%E3%82%89%E5%A4%89%E6%9B%B4">GitHubにログインして設定画面から変更</a></li><li><a href="#%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%AEgitconfig%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E7%B7%A8%E9%9B%86">ローカルの.gitconfigファイルを編集</a></li><li><a href="#git%E7%AE%A1%E7%90%86%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E8%A8%AD%E5%AE%9A%E5%A4%89%E6%9B%B4">Git管理のファイルの設定変更</a></li></ul><!-- tocstop --><br><h3><span id="githubにログインして設定画面から変更">GitHubにログインして設定画面から変更</span></h3><p>GitHubにログインして「Setting」→「Account」をクリックする。</p><p>表示された画面の「Change username」をクリックして、出てくるWarningっぽいポップアップの中の<code>I understand, let&#39;s change my username</code>を更にクリック。</p><p>新しいユーザ名を入れるウィンドウが出てくるので、ユーザ名を入力して「Change username」をクリックして完了。</p><br><h3><span id="ローカルのgitconfigファイルを編集">ローカルの.gitconfigファイルを編集</span></h3><p>エディタで直接編集。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~</span><br><span class="line">$ subl .gitconfig</span><br><span class="line"></span><br><span class="line">[user]</span><br><span class="line">  name = XXXX</span><br><span class="line">  email = XXXX</span><br></pre></td></tr></table></figure><br><h3><span id="git管理のファイルの設定変更">Git管理のファイルの設定変更</span></h3><p>現状はこのブログのファイルのみがGit管理下。まずリモートリポジトリを確認＆修正。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd myblog</span><br><span class="line">$ git remote -v</span><br><span class="line">$ git remote set-url origin 【新しいURL】</span><br></pre></td></tr></table></figure><br><p><code>_config.yml</code>も修正。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">url: https://【新しいユーザ名】.github.io/myblog/</span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: 【新しいURL】</span><br><span class="line">  branch: gh-pages</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHubでバックアップ</title>
      <link href="/myblog/2024/11/github-backup/"/>
      <url>/myblog/2024/11/github-backup/</url>
      
        <content type="html"><![CDATA[<p>ブログ立ち上げは無事できたが、現状ではGitHubでホストできているのは公開用データのみで、記事データ（.mdファイル）などはバックアップできていない。</p><p>＃Hexoはフォルダ内のデータから<code>hexo generate</code>コマンドでPublicフォルダを生成し、指定した公開場所（_config.ymlの#Deployment）にデプロイする。</p><p>職場で日頃から「端末は一番大事な時に壊れたりするのでローカルだけで持ってはいけない、必ずクラウドで管理すること」と言われているので、ブログデータ全体をGitHubでバックアップしながらGitHub Pagesにデプロイする方法を検討。</p><br><hr><h1><span id="手順"><strong>手順</strong></span></h1><hr><p>main(master)ブランチでバックアップを取りつつ、gh-pagesブランチにデプロイする。<br><br></p><ul><li>Hexoを入れているローカルフォルダをGit管理にする</li><li>コミットする</li><li>ローカルフォルダとGitHubのリモートリポジトリを紐づける</li><li>プッシュする</li><li><code>_config.yml</code>を書き換えてデプロイする</li></ul><br><p>まずはローカルフォルダをGit管理にする。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd myblog</span><br><span class="line">$ git init</span><br></pre></td></tr></table></figure><br><p>コミットする。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m &quot;XXXXX&quot;</span><br></pre></td></tr></table></figure><br><p>GitHubからリモートリポジトリのURLをコピーしてきたら、ローカルと紐づける。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin https://github.com/XXXXX</span><br></pre></td></tr></table></figure><br><p>プッシュする。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin main</span><br></pre></td></tr></table></figure><p>ローカルのメインリポジトリ名をmain、リモートがmasterになっていたせいでブランチが二つできてしまった。。。</p><p>GitHubでデフォルトのブランチをmasterからmainに変更して、masterブランチを削除。</p><p>その後、<code>_config.yml</code>の<code>branch:</code>をmasterからgh-pagesに編集。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:XXXXXX.git【GitHubのリポジトリのURL】</span><br><span class="line">  branch: gh-pages #ここをmasterから変更</span><br></pre></td></tr></table></figure><br><p>これまでの作業を保存（add, commit , push）して<code>hexo deploy</code>すると、リモートにgh-pagesブランチが作成される。</p><p>あとはGitHubのPagesの設定（Build and deployment）の「Branch」をgh-pagesブランチに変更すればOK.</p><br>---<p>今後は編集するたびに以下のコマンドを繰り返せばよさそう。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ git add</span><br><span class="line">$ git commit -m &quot;XXXXX&quot;</span><br><span class="line">$ git push origin main</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><br><p>参考にさせていただいたサイト<br><a href="https://qiita.com/nyu___nS/items/3fca57ce133be69835ba#comments">https://qiita.com/nyu___nS/items/3fca57ce133be69835ba#comments</a></p><br><br>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Icarus </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ブログ開始</title>
      <link href="/myblog/2024/10/start-blog/"/>
      <url>/myblog/2024/10/start-blog/</url>
      
        <content type="html"><![CDATA[<p>学んだ知識のメモ書きとして、技術ブログの立ち上げを思い立つ。</p><p>QiitaやZennなどのを既存ツールを検討したものの、自由度や視認性の高さなどに惹かれて静的サイトジェネレーターに決めた。テーマはHexoのicarus。</p><p>ホスト先はGitHub Pagesにした。管理が楽だというネットの評判で決めたが、Gitを学び始めて数日の超初心者のため諸々見事にハマり、立ち上げに数日かかった。。。</p><br><hr><h1><span id="手順"><strong>手順</strong></span></h1><hr><p>やることは大体こんな感じ。</p><!-- toc --><ul><li><a href="#1-nodejs%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">1. Node.jsのインストール</a></li><li><a href="#2-git%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%A8%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A">2. Gitのインストールと初期設定</a></li><li><a href="#3-hexo%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%97%E3%81%A6%E8%B5%B7%E5%8B%95">3. Hexoをインストールして起動</a></li><li><a href="#4-hexo%E3%81%AE%E3%83%86%E3%83%BC%E3%83%9Eicarus%E3%82%92%E5%B0%8E%E5%85%A5">4. Hexoのテーマ（Icarus）を導入</a><ul><li><a href="#%E3%83%8F%E3%83%9E%E3%82%8A%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%881%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E6%96%B9%E6%B3%95%E3%81%8C2%E7%A8%AE%E9%A1%9E%E3%81%82%E3%82%8B">ハマりポイント①：インストール方法が２種類ある</a></li><li><a href="#%E3%83%8F%E3%83%9E%E3%82%8A%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%882_configicarusyml%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%8C%E8%A6%8B%E5%BD%93%E3%81%9F%E3%82%89%E3%81%AA%E3%81%84">ハマりポイント②：_config.icarus.ymlファイルが見当たらない</a></li></ul></li><li><a href="#5-github%E3%81%AB%E3%83%97%E3%83%83%E3%82%B7%E3%83%A5%E3%81%97%E3%81%A6pages%E3%81%A7%E5%85%AC%E9%96%8B">5. GitHubにプッシュしてPagesで公開</a><ul><li><a href="#%E3%83%8F%E3%83%9E%E3%82%8A%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%883icarus%E3%81%8Csubmodule%E3%81%A8%E3%81%97%E3%81%A6%E8%AA%8D%E8%AD%98%E3%81%95%E3%82%8C%E3%82%8B%E3%81%93%E3%81%A8%E3%81%8C%E3%81%82%E3%82%8B">ハマりポイント③：icarusがsubmoduleとして認識されることがある</a></li></ul></li><li><a href="#6-%E6%84%9F%E6%83%B3">6. 感想</a></li></ul><!-- tocstop --><br><h2><span id="1-nodejsのインストール">1. Node.jsのインストール</span></h2><hr><p>homebrewでNode.jsをインストール＆確認。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew install node</span><br><span class="line">$ node -v</span><br></pre></td></tr></table></figure><br><br><h2><span id="2-gitのインストールと初期設定">2. Gitのインストールと初期設定</span></h2><hr><ul><li>Gitインストール(brew)</li><li>Gitユーザ設定＆メール設定</li><li>GitHubアカウント作成</li><li>GitHubでリポジトリを作成</li></ul><p>ググればたくさん情報が出てくるので省略。</p><br><br><h2><span id="3-hexoをインストールして起動">3. Hexoをインストールして起動</span></h2><hr><p>インストール＆確認。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install hexo-cli -g</span><br><span class="line">$ hexo -v</span><br></pre></td></tr></table></figure><br><p>ローカルにHexoの雛形を作成して、必要なパッケージをインストール。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init myblog</span><br><span class="line">$ cd myblog</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><br><p>hexo initコマンドの後ろにファイル名をつければ、ファイルを作成してその中に雛形をデプロイしてくれる。<code>INFO  Start blogging with Hexo!</code>と表示されればOK。</p><p>準備完了。ローカルで一旦立ち上げてみる。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><br><p><code>[info] Hexo is running at https://localhost:4000/. Press Ctrl+C to stop.</code>と表示されるので、localhost:4000にアクセスしてみる。止める時はCtrl+C。</p><br><br><h2><span id="4-hexoのテーマicarusを導入">4. Hexoのテーマ（Icarus）を導入</span></h2><hr><p>自分は3カラムのデザインにしたいと思い、Hexoのテーマを物色。</p><p>色々なデザインテーマが公開されているが、自分がしたいと3カラムのものは意外と少なく、シンプルな感じのIcarusに決定。</p><p>Icarus<br><a href="https://ppoffice.github.io/hexo-theme-icarus/uncategorized/getting-started-with-icarus/">https://ppoffice.github.io/hexo-theme-icarus/uncategorized/getting-started-with-icarus/</a></p><p>が、このテーマ導入でまずハマる。</p><br><h3><span id="ハマりポイント1インストール方法が2種類ある">ハマりポイント①：インストール方法が２種類ある</span></h3><p>Icarusのインストール方法はgit cloneとnpm経由の２種類があり、それぞれインストールされるフォルダが違う。</p><p>前者はmyblog&#x2F;themesの下にicarusというフォルダ名でインストールされるが、後者はmyblog&#x2F;node_modulesの下にhexo-theme-icarus（とhexo-renderer-inferno）がインストールされる。</p><p>最初にnpmでインストールした後、インストール先がわからずcloneもしてしまった。</p><p>その後にthemesの下のフォルダの方で設定を変更したが、デプロイ後に反映されず、node_modules側を読み込んでいるのだと気づくのに時間がかかった。</p><br><p>自分はnpm経由を選択。「Install via NPM」のタブからコマンドを実行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -S hexo-theme-icarus hexo-renderer-inferno</span><br></pre></td></tr></table></figure><br><p>その後、myblogのフォルダ内にある<code>_config.yml</code>のthemesの項をicarusに変更。</p><p>公式では<code>hexo config theme icarus</code>コマンドが紹介されているが、コマンドを実行したらymlファイルのレイアウトが変わって気持ち悪かったので、手動で対応。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: icarus</span><br></pre></td></tr></table></figure><br><p>ここまでで一旦ローカルで立ち上げ直してみて、Icarusがテーマとして反映されているか確認。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><br><p>localhost:4000を見てみて、テーマが反映されていればOK。</p><br><h3><span id="ハマりポイント2_configicarusymlファイルが見当たらない">ハマりポイント②：_config.icarus.ymlファイルが見当たらない</span></h3><p><code>hexo generate</code>は、静的NTMLをpublicフォルダに生成してくれるコマンド。</p><p>ローカルでの動作確認だけなら<code>hexo server</code>の前に実行する必要はないが、Icarusのデザイン調整を行う<code>_config.icarus.yml</code>ファイルは、<code>hexo generate</code>実行後に生成される。</p><p>このことを知らず、当初<code>hexo generate</code>を実行せずに<code>hexo server</code>だけ実行してローカルで動かしつつデザイン調整をしようとしたため、肝心のymlファイルが見当たらなくて焦った。</p><br><br><h2><span id="5-githubにプッシュしてpagesで公開">5. GitHubにプッシュしてPagesで公開</span></h2><hr><p>エディタで<code>_config.yml</code>を以下のように編集。デプロイの項目は<code>repo:</code>と<code>branch:</code>を追記。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">url: https://XXXXXX【ユーザ名】.github.io/XXXXXX【リポジトリ名】/</span><br><span class="line"></span><br><span class="line"># Deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:XXXXXX.git【GitHubのリポジトリのURL】</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><br><p>上のURL情報はデプロイに必要か分からないが、一応入れておく。</p><p>これをhexoのコマンドでデプロイするが、Gitへのデプロイヤーが必要なため先に入れておく。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line">$ hexo deploy -g</span><br></pre></td></tr></table></figure><br><p>その後、リポジトリの「Settings」→「Pages」→「Build and deployment」の箇所でBranchを「master」に選択してsave。</p><p>しばらくすると、「Pages」に<code>Your site is live at https://XXXXX</code>という表示が出るので、アクセスしてみて見れればOK。</p><br><h3><span id="ハマりポイント3icarusがsubmoduleとして認識されることがある">ハマりポイント③：icarusがsubmoduleとして認識されることがある</span></h3><p>最初ビルドした際に、エラーが発生して正常に公開できなかった。</p><p>エラーメッセージを見たところ、どうやらicarusをsubmoduleとして認識しているが.gitmoduleファイルに記述が見当たらない、というものらしい（そもそもsubmoduleという概念自体を知らなかったため、ここでもまた理解するのに時間がかかった）。。。</p><p>原因を特定したはいいものの、現存のicarusフォルダをsubmoduleする方法もその後のsubmoduleの管理方法を調べてみても、超初心者にはよくわからない。。。</p><p>よくよく調べてみると、そもそもPagesはデフォルトでJekyllという自動ビルドツールを使っており、このJekyllがicarusをsubmoduleと認識してしまっているっぽい。</p><p><code>.nojekyll</code>という空ファイルをディレクトリ内に置いておくとJekyllの自動ビルドが行われないとのことで、これを試してみたところ無事ビルドされて公開できた。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ touch .nojekyll</span><br></pre></td></tr></table></figure><br><br><h2><span id="6-感想">6. 感想</span></h2><hr><p>主に参考にさせていただいたサイトは以下のとおり。</p><p><a href="https://liginc.co.jp/web/programming/server/104594">https://liginc.co.jp/web/programming/server/104594</a><br><a href="https://qiita.com/ORCHESTRA_TAPE/items/092d1479ff6dcc7e51c2">https://qiita.com/ORCHESTRA_TAPE/items/092d1479ff6dcc7e51c2</a><br><a href="https://tech.qookie.jp/posts/hexo-deploy-github-pages-backup-version/">https://tech.qookie.jp/posts/hexo-deploy-github-pages-backup-version/</a></p><p>Gitに限らず全般的なリテラシー不足なため、諸々初歩的な点で躓いてしまうが、備忘のため恥を忍んで記録に残す。</p><p>＃デザインファイル（hexo-theme-icarus&#x2F;style&#x2F;*.styl）の変更が<code>hexo deploy -g</code>コマンドでもうまく反映できないのが追加課題。。。</p><br><br>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Icarus </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
