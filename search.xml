<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ブログ開始</title>
      <link href="/myblog/test/"/>
      <url>/myblog/test/</url>
      
        <content type="html"><![CDATA[<p>学んだ知識のメモ書きとして、技術ブログの立ち上げを思い立つ。</p><p>QiitaやZennなどのを既存ツールを検討したものの、自由度や視認性の高さなどに惹かれて静的サイトジェネレーターに決めた。テーマはHexoのicarus。</p><p>ホスト先はGitHub Pagesにした。管理が楽だというネットの評判で決めたが、Gitを学び始めて数日の超初心者のため諸々見事にハマり、立ち上げに数日かかった。。。</p><br><hr><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a><strong>手順</strong></h2><hr><p>やることは大体こんな感じ。</p><ul><li>Node.jsを入れる</li><li>Gitを入れる・GitHubを始めてリポジトリを作る</li><li>Hexoを入れる</li><li>Hexoのテーマ（Icarus）を入れる</li><li>ローカルのHexoデータをGitHubにプッシュしてPagesで公開する</li></ul><br><h3 id="1-Node-jsのインストール"><a href="#1-Node-jsのインストール" class="headerlink" title="1. Node.jsのインストール"></a><strong>1. Node.jsのインストール</strong></h3><p>homebrewでNode.jsをインストール＆確認。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew install node</span><br><span class="line">$ node -v</span><br></pre></td></tr></table></figure><br><br><h3 id="2-Gitのインストールと初期設定"><a href="#2-Gitのインストールと初期設定" class="headerlink" title="2. Gitのインストールと初期設定"></a><strong>2. Gitのインストールと初期設定</strong></h3><ul><li>Gitインストール(brew)</li><li>Gitユーザ設定＆メール設定</li><li>GitHubアカウント作成</li><li>GitHubでリポジトリを作成</li></ul><p>ググればたくさん情報が出てくるので省略。</p><br><br><h3 id="3-Hexoをインストールして起動"><a href="#3-Hexoをインストールして起動" class="headerlink" title="3. Hexoをインストールして起動"></a><strong>3. Hexoをインストールして起動</strong></h3><p>インストール＆確認。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install hexo-cli -g</span><br><span class="line">$ hexo -v</span><br></pre></td></tr></table></figure><br><p>ローカルにHexoの雛形を作成して、必要なパッケージをインストール。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init myblog</span><br><span class="line">$ cd myblog</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><br><p>hexo initコマンドの後ろにファイル名をつければ、ファイルを作成してその中に雛形をデプロイしてくれる。<code>INFO  Start blogging with Hexo!</code>と表示されればOK。</p><p>準備完了。ローカルで一旦立ち上げてみる。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><br><p><code>[info] Hexo is running at https://localhost:4000/. Press Ctrl+C to stop.</code>と表示されるので、localhost:4000にアクセスしてみる。止める時はCtrl+C。</p><br><br><h3 id="4-Hexoのテーマ（Icarus）を導入"><a href="#4-Hexoのテーマ（Icarus）を導入" class="headerlink" title="4. Hexoのテーマ（Icarus）を導入"></a><strong>4. Hexoのテーマ（Icarus）を導入</strong></h3><p>自分は3カラムのデザインにしたいと思い、Hexoのテーマを物色。</p><p>色々なデザインテーマが公開されているが、自分がしたいと3カラムのものは意外と少なく、シンプルな感じのIcarusに決定。</p><p>Icarus<br><a href="https://ppoffice.github.io/hexo-theme-icarus/uncategorized/getting-started-with-icarus/">https://ppoffice.github.io/hexo-theme-icarus/uncategorized/getting-started-with-icarus/</a></p><p>が、このテーマ導入でまずハマる。</p><br><h4 id="ハマりポイント①：インストール方法が２種類ある"><a href="#ハマりポイント①：インストール方法が２種類ある" class="headerlink" title="ハマりポイント①：インストール方法が２種類ある"></a><strong>ハマりポイント①：インストール方法が２種類ある</strong></h4><p>Icarusのインストール方法はgit cloneとnpm経由の２種類があり、それぞれインストールされるフォルダが違う。</p><p>前者はmyblog&#x2F;themesの下にicarusというフォルダ名でインストールされるが、後者はmyblog&#x2F;node_modulesの下にhexo-theme-icarus（とhexo-renderer-inferno）がインストールされる。</p><p>最初にnpmでインストールした後、インストール先がわからずcloneもしてしまった。</p><p>その後にthemesの下のフォルダの方で設定を変更したが、デプロイ後に反映されず、node_modules側を読み込んでいるのだと気づくのに時間がかかった。</p><br><p>自分はnpm経由を選択。「Install via NPM」のタブからコマンドを実行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -S hexo-theme-icarus hexo-renderer-inferno</span><br></pre></td></tr></table></figure><br><p>その後、myblogのフォルダ内にある<code>_config.yml</code>のthemesの項をicarusに変更。</p><p>公式では<code>hexo config theme icarus</code>コマンドが紹介されているが、コマンドを実行したらymlファイルのレイアウトが変わって気持ち悪かったので、手動で対応。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: icarus</span><br></pre></td></tr></table></figure><br><p>ここまでで一旦ローカルで立ち上げ直してみて、Icarusがテーマとして反映されているか確認。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><br><p>localhost:4000を見てみて、テーマが反映されていればOK。</p><br><h4 id="ハマりポイント②：-config-icarus-ymlファイルが見当たらない"><a href="#ハマりポイント②：-config-icarus-ymlファイルが見当たらない" class="headerlink" title="ハマりポイント②：_config.icarus.ymlファイルが見当たらない"></a><strong>ハマりポイント②：_config.icarus.ymlファイルが見当たらない</strong></h4><p><code>hexo generate</code>は、静的NTMLをpublicフォルダに生成してくれるコマンド。</p><p>ローカルでの動作確認だけなら<code>hexo server</code>の前に実行する必要はないが、Icarusのデザイン調整を行う<code>_config.icarus.yml</code>ファイルは、<code>hexo generate</code>実行後に生成される。</p><p>このことを知らず、当初<code>hexo generate</code>を実行せずに<code>hexo server</code>だけ実行してローカルで動かしつつデザイン調整をしようとしたため、肝心のymlファイルが見当たらなくて焦った。</p><br><br><h3 id="5-GitHubにプッシュしてPagesで公開"><a href="#5-GitHubにプッシュしてPagesで公開" class="headerlink" title="5. GitHubにプッシュしてPagesで公開"></a><strong>5. GitHubにプッシュしてPagesで公開</strong></h3><p>エディタで<code>_config.yml</code>を以下のように編集。デプロイの項目は<code>repo:</code>と<code>branch:</code>を追記。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">url: https://XXXXXX【ユーザ名】.github.io/XXXXXX【リポジトリ名】/</span><br><span class="line"></span><br><span class="line"># Deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:XXXXXX.git【GitHubのリポジトリのURL】</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><br><p>上のURL情報はデプロイに必要か分からないが、一応入れておく。</p><p>これをhexoのコマンドでデプロイするが、Gitへのデプロイヤーが必要なため先に入れておく。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line">$ hexo deploy -g</span><br></pre></td></tr></table></figure><br><p>その後、リポジトリの「Settings」→「Pages」→「Build and deployment」の箇所でBranchを「master」に選択してsave。</p><p>しばらくすると、「Pages」に<code>Your site is live at https://XXXXX</code>という表示が出るので、アクセスしてみて見れればOK。</p><br><h4 id="ハマりポイント③：icarusがsubmoduleとして認識されることがある"><a href="#ハマりポイント③：icarusがsubmoduleとして認識されることがある" class="headerlink" title="ハマりポイント③：icarusがsubmoduleとして認識されることがある"></a><strong>ハマりポイント③：icarusがsubmoduleとして認識されることがある</strong></h4><p>最初ビルドした際に、エラーが発生して正常に公開できなかった。</p><p>エラーメッセージを見たところ、どうやらicarusをsubmoduleとして認識しているが.gitmoduleファイルに記述が見当たらない、というものらしい（そもそもsubmoduleという概念自体を知らなかったため、ここでもまた理解するのに時間がかかった）。。。</p><p>原因を特定したはいいものの、現存のicarusフォルダをsubmoduleする方法もその後のsubmoduleの管理方法を調べてみても、超初心者にはよくわからない。。。</p><p>よくよく調べてみると、そもそもPagesはデフォルトでJekyllという自動ビルドツールを使っており、このJekyllがicarusをsubmoduleと認識してしまっているっぽい。</p><p><code>.nojekyll</code>という空ファイルをディレクトリ内に置いておくとJekyllの自動ビルドが行われないとのことで、これを試してみたところ無事ビルドされて公開できた。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ touch .nojekyll</span><br></pre></td></tr></table></figure><br><br><h3 id="6-感想"><a href="#6-感想" class="headerlink" title="6. 感想"></a><strong>6. 感想</strong></h3><p>主に参考にさせていただいたサイトは以下のとおり。</p><p><a href="https://liginc.co.jp/web/programming/server/104594">https://liginc.co.jp/web/programming/server/104594</a><br><a href="https://qiita.com/ORCHESTRA_TAPE/items/092d1479ff6dcc7e51c2">https://qiita.com/ORCHESTRA_TAPE/items/092d1479ff6dcc7e51c2</a><br><a href="https://tech.qookie.jp/posts/hexo-deploy-github-pages-backup-version/">https://tech.qookie.jp/posts/hexo-deploy-github-pages-backup-version/</a></p><p>Gitに限らず全般的なリテラシー不足なため、諸々初歩的な点で躓いてしまうが、備忘のため恥を忍んで記録に残す。</p><p>＃デザインファイル（hexo-theme-icarus&#x2F;style&#x2F;*.styl）の変更が<code>hexo deploy -g</code>コマンドでもうまく反映できないのが追加課題。。。</p><br><br>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Icarus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHubでバックアップ</title>
      <link href="/myblog/1_GitHub%E3%81%A6%E3%82%99%E3%83%8F%E3%82%99%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%95%E3%82%9A/"/>
      <url>/myblog/1_GitHub%E3%81%A6%E3%82%99%E3%83%8F%E3%82%99%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%95%E3%82%9A/</url>
      
        <content type="html"><![CDATA[<p>ブログ立ち上げは無事できたが、現状ではGitHubでホストできているのは公開用データのみで、記事データ（.mdファイル）などはバックアップできていない。</p><p>＃Hexoはフォルダ内のデータから<code>hexo generate</code>コマンドでPublicフォルダを生成し、指定した公開場所（_config.ymlの#Deployment）にデプロイする。</p><p>職場で日頃から「端末は一番大事な時に壊れたりするのでローカルだけで持ってはいけない、必ずクラウドで管理すること」と言われているので、ブログデータ全体をGitHubでバックアップしながらGitHub Pagesにデプロイする方法を検討。</p><br><hr><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a><strong>手順</strong></h2><hr><p>main(master)ブランチでバックアップを取りつつ、gh-pagesブランチにデプロイする。</p><ul><li>Hexoを入れているローカルフォルダをGit管理にする</li><li>コミットする</li><li>ローカルフォルダとGitHubのリモートリポジトリを紐づける</li><li>プッシュする</li><li><code>_config.yml</code>を書き換えてデプロイする</li></ul><br><p>まずはローカルフォルダをGit管理にする。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd myblog</span><br><span class="line">$ git init</span><br></pre></td></tr></table></figure><br><p>コミットする。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m &quot;XXXXX&quot;</span><br></pre></td></tr></table></figure><br><p>GitHubからリモートリポジトリのURLをコピーしてきたら、ローカルと紐づける。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin https://github.com/XXXXX</span><br></pre></td></tr></table></figure><br><p>プッシュする。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin main</span><br></pre></td></tr></table></figure><p>ローカルのメインリポジトリ名をmain、リモートがmasterになっていたせいでブランチが二つできてしまった。。。</p><p>GitHubでデフォルトのブランチをmasterからmainに変更して、masterブランチを削除。</p><p>その後、<code>_config.yml</code>の<code>branch:</code>をmasterからgh-pagesに編集。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:XXXXXX.git【GitHubのリポジトリのURL】</span><br><span class="line">  branch: gh-pages #ここをmasterから変更</span><br></pre></td></tr></table></figure><br><p>これまでの作業を保存（add, commit , push）して<code>hexo deploy</code>すると、リモートにgh-pagesブランチが作成される。</p><p>あとはGitHubのPagesの設定（Build and deployment）の「Branch」をgh-pagesブランチに変更すればOK.</p><br>---<p>今後は編集するたびに以下のコマンドを繰り返せばよさそう。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ git add</span><br><span class="line">$ git commit -m &quot;XXXXX&quot;</span><br><span class="line">$ git push origin main</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><br><p>参考にさせていただいたサイト<br><a href="https://qiita.com/nyu___nS/items/3fca57ce133be69835ba#comments">https://qiita.com/nyu___nS/items/3fca57ce133be69835ba#comments</a></p><br><br>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Icarus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ブログ開始</title>
      <link href="/myblog/2_%E3%83%95%E3%82%99%E3%83%AD%E3%82%AF%E3%82%99%E9%96%8B%E5%A7%8B/"/>
      <url>/myblog/2_%E3%83%95%E3%82%99%E3%83%AD%E3%82%AF%E3%82%99%E9%96%8B%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<p>学んだ知識のメモ書きとして、技術ブログの立ち上げを思い立つ。</p><p>QiitaやZennなどのを既存ツールを検討したものの、自由度や視認性の高さなどに惹かれて静的サイトジェネレーターに決めた。テーマはHexoのicarus。</p><p>ホスト先はGitHub Pagesにした。管理が楽だというネットの評判で決めたが、Gitを学び始めて数日の超初心者のため諸々見事にハマり、立ち上げに数日かかった。。。</p><br><hr><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a><strong>手順</strong></h2><hr><p>やることは大体こんな感じ。</p><ul><li>Node.jsを入れる</li><li>Gitを入れる・GitHubを始めてリポジトリを作る</li><li>Hexoを入れる</li><li>Hexoのテーマ（Icarus）を入れる</li><li>ローカルのHexoデータをGitHubにプッシュしてPagesで公開する</li></ul><br><h3 id="1-Node-jsのインストール"><a href="#1-Node-jsのインストール" class="headerlink" title="1. Node.jsのインストール"></a><strong>1. Node.jsのインストール</strong></h3><p>homebrewでNode.jsをインストール＆確認。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew install node</span><br><span class="line">$ node -v</span><br></pre></td></tr></table></figure><br><br><h3 id="2-Gitのインストールと初期設定"><a href="#2-Gitのインストールと初期設定" class="headerlink" title="2. Gitのインストールと初期設定"></a><strong>2. Gitのインストールと初期設定</strong></h3><ul><li>Gitインストール(brew)</li><li>Gitユーザ設定＆メール設定</li><li>GitHubアカウント作成</li><li>GitHubでリポジトリを作成</li></ul><p>ググればたくさん情報が出てくるので省略。</p><br><br><h3 id="3-Hexoをインストールして起動"><a href="#3-Hexoをインストールして起動" class="headerlink" title="3. Hexoをインストールして起動"></a><strong>3. Hexoをインストールして起動</strong></h3><p>インストール＆確認。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install hexo-cli -g</span><br><span class="line">$ hexo -v</span><br></pre></td></tr></table></figure><br><p>ローカルにHexoの雛形を作成して、必要なパッケージをインストール。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init myblog</span><br><span class="line">$ cd myblog</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><br><p>hexo initコマンドの後ろにファイル名をつければ、ファイルを作成してその中に雛形をデプロイしてくれる。<code>INFO  Start blogging with Hexo!</code>と表示されればOK。</p><p>準備完了。ローカルで一旦立ち上げてみる。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><br><p><code>[info] Hexo is running at https://localhost:4000/. Press Ctrl+C to stop.</code>と表示されるので、localhost:4000にアクセスしてみる。止める時はCtrl+C。</p><br><br><h3 id="4-Hexoのテーマ（Icarus）を導入"><a href="#4-Hexoのテーマ（Icarus）を導入" class="headerlink" title="4. Hexoのテーマ（Icarus）を導入"></a><strong>4. Hexoのテーマ（Icarus）を導入</strong></h3><p>自分は3カラムのデザインにしたいと思い、Hexoのテーマを物色。</p><p>色々なデザインテーマが公開されているが、自分がしたいと3カラムのものは意外と少なく、シンプルな感じのIcarusに決定。</p><p>Icarus<br><a href="https://ppoffice.github.io/hexo-theme-icarus/uncategorized/getting-started-with-icarus/">https://ppoffice.github.io/hexo-theme-icarus/uncategorized/getting-started-with-icarus/</a></p><p>が、このテーマ導入でまずハマる。</p><br><h4 id="ハマりポイント①：インストール方法が２種類ある"><a href="#ハマりポイント①：インストール方法が２種類ある" class="headerlink" title="ハマりポイント①：インストール方法が２種類ある"></a><strong>ハマりポイント①：インストール方法が２種類ある</strong></h4><p>Icarusのインストール方法はgit cloneとnpm経由の２種類があり、それぞれインストールされるフォルダが違う。</p><p>前者はmyblog&#x2F;themesの下にicarusというフォルダ名でインストールされるが、後者はmyblog&#x2F;node_modulesの下にhexo-theme-icarus（とhexo-renderer-inferno）がインストールされる。</p><p>最初にnpmでインストールした後、インストール先がわからずcloneもしてしまった。</p><p>その後にthemesの下のフォルダの方で設定を変更したが、デプロイ後に反映されず、node_modules側を読み込んでいるのだと気づくのに時間がかかった。</p><br><p>自分はnpm経由を選択。「Install via NPM」のタブからコマンドを実行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -S hexo-theme-icarus hexo-renderer-inferno</span><br></pre></td></tr></table></figure><br><p>その後、myblogのフォルダ内にある<code>_config.yml</code>のthemesの項をicarusに変更。</p><p>公式では<code>hexo config theme icarus</code>コマンドが紹介されているが、コマンドを実行したらymlファイルのレイアウトが変わって気持ち悪かったので、手動で対応。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: icarus</span><br></pre></td></tr></table></figure><br><p>ここまでで一旦ローカルで立ち上げ直してみて、Icarusがテーマとして反映されているか確認。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><br><p>localhost:4000を見てみて、テーマが反映されていればOK。</p><br><h4 id="ハマりポイント②：-config-icarus-ymlファイルが見当たらない"><a href="#ハマりポイント②：-config-icarus-ymlファイルが見当たらない" class="headerlink" title="ハマりポイント②：_config.icarus.ymlファイルが見当たらない"></a><strong>ハマりポイント②：_config.icarus.ymlファイルが見当たらない</strong></h4><p><code>hexo generate</code>は、静的NTMLをpublicフォルダに生成してくれるコマンド。</p><p>ローカルでの動作確認だけなら<code>hexo server</code>の前に実行する必要はないが、Icarusのデザイン調整を行う<code>_config.icarus.yml</code>ファイルは、<code>hexo generate</code>実行後に生成される。</p><p>このことを知らず、当初<code>hexo generate</code>を実行せずに<code>hexo server</code>だけ実行してローカルで動かしつつデザイン調整をしようとしたため、肝心のymlファイルが見当たらなくて焦った。</p><br><br><h3 id="5-GitHubにプッシュしてPagesで公開"><a href="#5-GitHubにプッシュしてPagesで公開" class="headerlink" title="5. GitHubにプッシュしてPagesで公開"></a><strong>5. GitHubにプッシュしてPagesで公開</strong></h3><p>エディタで<code>_config.yml</code>を以下のように編集。デプロイの項目は<code>repo:</code>と<code>branch:</code>を追記。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">url: https://XXXXXX【ユーザ名】.github.io/XXXXXX【リポジトリ名】/</span><br><span class="line"></span><br><span class="line"># Deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:XXXXXX.git【GitHubのリポジトリのURL】</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><br><p>上のURL情報はデプロイに必要か分からないが、一応入れておく。</p><p>これをhexoのコマンドでデプロイするが、Gitへのデプロイヤーが必要なため先に入れておく。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line">$ hexo deploy -g</span><br></pre></td></tr></table></figure><br><p>その後、リポジトリの「Settings」→「Pages」→「Build and deployment」の箇所でBranchを「master」に選択してsave。</p><p>しばらくすると、「Pages」に<code>Your site is live at https://XXXXX</code>という表示が出るので、アクセスしてみて見れればOK。</p><br><h4 id="ハマりポイント③：icarusがsubmoduleとして認識されることがある"><a href="#ハマりポイント③：icarusがsubmoduleとして認識されることがある" class="headerlink" title="ハマりポイント③：icarusがsubmoduleとして認識されることがある"></a><strong>ハマりポイント③：icarusがsubmoduleとして認識されることがある</strong></h4><p>最初ビルドした際に、エラーが発生して正常に公開できなかった。</p><p>エラーメッセージを見たところ、どうやらicarusをsubmoduleとして認識しているが.gitmoduleファイルに記述が見当たらない、というものらしい（そもそもsubmoduleという概念自体を知らなかったため、ここでもまた理解するのに時間がかかった）。。。</p><p>原因を特定したはいいものの、現存のicarusフォルダをsubmoduleする方法もその後のsubmoduleの管理方法を調べてみても、超初心者にはよくわからない。。。</p><p>よくよく調べてみると、そもそもPagesはデフォルトでJekyllという自動ビルドツールを使っており、このJekyllがicarusをsubmoduleと認識してしまっているっぽい。</p><p><code>.nojekyll</code>という空ファイルをディレクトリ内に置いておくとJekyllの自動ビルドが行われないとのことで、これを試してみたところ無事ビルドされて公開できた。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ touch .nojekyll</span><br></pre></td></tr></table></figure><br><br><h3 id="6-感想"><a href="#6-感想" class="headerlink" title="6. 感想"></a><strong>6. 感想</strong></h3><p>主に参考にさせていただいたサイトは以下のとおり。</p><p><a href="https://liginc.co.jp/web/programming/server/104594">https://liginc.co.jp/web/programming/server/104594</a><br><a href="https://qiita.com/ORCHESTRA_TAPE/items/092d1479ff6dcc7e51c2">https://qiita.com/ORCHESTRA_TAPE/items/092d1479ff6dcc7e51c2</a><br><a href="https://tech.qookie.jp/posts/hexo-deploy-github-pages-backup-version/">https://tech.qookie.jp/posts/hexo-deploy-github-pages-backup-version/</a></p><p>Gitに限らず全般的なリテラシー不足なため、諸々初歩的な点で躓いてしまうが、備忘のため恥を忍んで記録に残す。</p><p>＃デザインファイル（hexo-theme-icarus&#x2F;style&#x2F;*.styl）の変更が<code>hexo deploy -g</code>コマンドでもうまく反映できないのが追加課題。。。</p><br><br>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Icarus </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
